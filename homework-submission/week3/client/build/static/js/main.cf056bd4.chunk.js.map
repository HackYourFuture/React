{"version":3,"sources":["components/spinner/index.jsx","components/HomeworkWeek3/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Spinner","react_default","a","createElement","className","React","Component","HomeworkWeek3","data","this","props","randomNumber","Math","floor","random","date","Date","map","item","key","surname","name","role","aria-label","gender","region","toISOString","slice","App","state","isLoading","_this2","fetch","then","response","json","setState","_this$state","spinner","components_HomeworkWeek3","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSASeA,gMAJX,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAFJC,IAAMC,YCmEbC,0LAjEX,IAAMC,EAAOC,KAAKC,MAAMF,KAClBG,EAAeC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAyB,IACxDC,EAAO,IAAIC,MAAM,IAAIA,KAAK,KAAM,EAAG,GAAKJ,KAAKC,MAAsB,KAAhBD,KAAKE,WAC9D,OACEb,EAAAC,EAAAC,cAAA,WAEIK,EAAKS,IAAI,SAAAC,GACP,OACEjB,EAAAC,EAAAC,cAAA,OAAKgB,IAAKD,EAAKE,SACbnB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACXc,EAAKG,KADR,IACeH,EAAKE,SAEpBnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMmB,KAAK,MAAMC,aAAW,gBAA5B,gBAGAtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQc,EAAKM,SAE/BvB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMmB,KAAK,MAAMC,aAAW,eAA5B,gBAGAtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQc,EAAKO,SAE/BxB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMmB,KAAK,MAAMC,aAAW,eAA5B,gBAGAtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQO,IAE1BV,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMmB,KAAK,MAAMC,aAAW,uBAA5B,gBAGAtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAQW,EAAKW,cAAcC,MAAM,EAAG,MAEtD1B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMmB,KAAK,MAAMC,aAAW,cAA5B,gBAGAtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACbc,EAAKG,KADR,IACeH,EAAKE,QADpB,iBAIFnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMmB,KAAK,MAAMC,aAAW,aAA5B,gBAGAtB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QACbc,EAAKG,KADR,IACeN,EAAKW,cAAcC,MAAM,EAAG,UAOpDf,KAAKC,MAAsB,GAAhBD,KAAKE,mBA5DDT,IAAMC,YCmBnBsB,6MAhBbC,MAAQ,CACNrB,KAAM,GACNsB,WAAW,sFAGO,IAAAC,EAAAtB,KAClBuB,MAAM,sCACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAzB,GAAI,OAAIuB,EAAKK,SAAS,CAAE5B,KAAMA,EAAMsB,WAAW,uCAGhD,IAAAO,EACqB5B,KAAKoB,MAAzBrB,EADD6B,EACC7B,KAAMsB,EADPO,EACOP,UACd,OAAO7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAf,IAAuB0B,EAAY7B,EAAAC,EAAAC,cAACmC,EAAD,MAAcrC,EAAAC,EAAAC,cAACoC,EAAD,CAAe/B,KAAMA,IAAtE,YAdOH,IAAMC,WCOJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,KAAK,SAAAoB,GACjCA,EAAaC","file":"static/js/main.cf056bd4.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nclass Spinner extends React.Component {\n  render() {\n    return <div className=\"loadingspinner\" />;\n  }\n}\n\nexport default Spinner;\n","import React from 'react';\nimport './style.css';\n\nclass HomeworkWeek3 extends React.Component {\n  render() {\n    const data = this.props.data;\n    const randomNumber = Math.floor(Math.random() * 9000000000) + 1000000000;\n    const date = new Date(+new Date(1989, 1, 1) - Math.floor(Math.random() * 10000000000));\n    return (\n      <div>\n        {\n          data.map(item => {\n            return (\n              <div key={item.surname}>\n                <h1 className=\"text\">\n                  {item.name} {item.surname}\n                </h1>\n                <div>\n                  <ul>\n                    <li>\n                      <span role=\"img\" aria-label=\"person-emoji\">\n                        üë§\n                      </span>\n                      <span className=\"text\">{item.gender}</span>\n                    </li>\n                    <li>\n                      <span role=\"img\" aria-label=\"world-emoji\">\n                        üåê\n                      </span>\n                      <span className=\"text\">{item.region}</span>\n                    </li>\n                    <li>\n                      <span role=\"img\" aria-label=\"phone-emoji\">\n                        üìû\n                      </span>\n                      <span className=\"text\">{randomNumber}</span>\n                    </li>\n                    <li>\n                      <span role=\"img\" aria-label=\"birthday cake-emoji\">\n                        üéÇ\n                      </span>\n                      <span className=\"text\">{date.toISOString().slice(0, 10)}</span>\n                    </li>\n                    <li>\n                      <span role=\"img\" aria-label=\"mail-emoji\">\n                        ‚úâÔ∏è\n                      </span>\n                      <span className=\"text\">\n                        {item.name}-{item.surname}@example.com\n                      </span>\n                    </li>\n                    <li>\n                      <span role=\"img\" aria-label=\"key-emoji\">\n                        üîë\n                      </span>\n                      <span className=\"text\">\n                        {item.name}-{date.toISOString().slice(2, 4)}\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n              </div>\n            );\n          })[Math.floor(Math.random() * 10)]\n        }\n      </div>\n    );\n  }\n}\n\nexport default HomeworkWeek3;\n","import React from 'react';\nimport './App.css';\nimport Spinner from './components/spinner/index';\nimport HomeworkWeek3 from './components/HomeworkWeek3/index';\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    isLoading: true,\n  };\n\n  componentDidMount() {\n    fetch('https://uinames.com/api/?amount=10')\n      .then(response => response.json())\n      .then(data => this.setState({ data: data, isLoading: false }));\n  }\n\n  render() {\n    const { data, isLoading } = this.state;\n    return <div className=\"App\"> {isLoading ? <Spinner /> : <HomeworkWeek3 data={data} />} </div>;\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}