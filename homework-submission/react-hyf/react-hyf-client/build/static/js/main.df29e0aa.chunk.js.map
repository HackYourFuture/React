{"version":3,"sources":["HomeworkWeek3/FullName.js","HomeworkWeek3/Item.js","HomeworkWeek3/List.js","HomeworkWeek3/Image.js","HomeworkWeek3/Filter.js","HomeworkWeek3/FilterBar.js","HomeworkWeek3/HomeworkWeek3.js","App.js","serviceWorker.js","index.js"],"names":["FullName","props","name","surname","Item","icon","text","List","items","className","map","item","index","key","Image","src","photo","alt","Filter","onClick","type","FilterBar","filter","reset","HomeworkWeek3","changeIndex","e","randomIndex","Math","floor","random","state","filteredPeople","length","people","console","log","preventDefault","setState","displayedIndex","filterPeople","filteredValue","target","person","gender","resetFilter","fetch","then","response","json","data","catch","err","this","displayedItems","region","phone","birthday","dmy","email","password","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.df29e0aa.chunk.js","sourcesContent":["import React from 'react';\n\nconst FullName = (props) => {\n  const {name, surname } = props;\n  return <h2>{name} {surname}</h2>\n}\n\nexport default FullName;","\nimport React from 'react';\n\nconst Item = (props) => {\n  const { icon, text } = props;\n  return (\n    <div>\n      {icon}<span>  {text}</span>\n    </div>)\n}\n\nexport default Item;","import React from 'react';\nimport Item from './Item';\n\nconst List = (props) => {\n  const { items } = props;\n  return (\n    <div className='info_list'>\n      {items.map((item, index) => <Item key={index} text={item.text} icon={item.icon} />)}\n    </div>)\n}\n\nexport default List;\n\n","import React from 'react';\n\nconst Image = (props) => {\n  return <img src={props.photo} alt={`face of ${props.name}`}/>\n}\n\n\nexport default Image;","import React from 'react';\n\nconst Filter = (props) => {\n  const { onClick, icon, type } = props;\n  return <div className='filter_icon'>\n    <button name={type} onClick={onClick}>{icon}</button>\n  </div>\n}\n\nexport default Filter;","import React from 'react';\nimport Filter from './Filter';\n\nconst FilterBar = (props) => {\n  const { items, filter, reset} = props;\n\n  return (\n    <div className=\"filter_bar\">\n      {items.map((item, index) => {\n        return <Filter icon={item.icon} key={index} type={item.type} onClick={filter}/>\n      })}\n      <Filter icon={'all'} onClick={reset} />\n    </div>\n  )\n}\n\nexport default FilterBar;","import React, { Component } from 'react';\nimport FullName from './FullName';\nimport List from './List';\nimport Image from './Image';\nimport FilterBar from './FilterBar';\n\nclass HomeworkWeek3 extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      people: [],\n      filteredPeople: [],\n      displayedIndex: 0,\n    }\n  }\n  componentDidMount() {\n    fetch('https://uinames.com/api/?amount=10&ext')\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        const people = data;\n        \n        this.setState({people, filteredPeople: people})\n  \n      }).catch(err => {\n        console.log(err, 'try again!')\n      });\n  }\n  changeIndex = (e) => {\n    const randomIndex = 0 + Math.floor(Math.random()* this.state.filteredPeople.length || this.state.people.length);\n    console.log(randomIndex);\n    e.preventDefault();\n    this.setState({displayedIndex: randomIndex})\n  }\n\n  filterPeople = (e) => {\n    const filteredValue = e.target.name;\n    const filteredPeople = this.state.people.filter(person => {\n      return person.gender === filteredValue;\n    }); \n    this.setState({ filteredPeople, displayedIndex: 0 });\n  }\n\n  resetFilter = () => {\n    const filteredPeople = this.state.people;\n    this.setState({ filteredPeople });\n  }\n\n  render() {\n    const { filteredPeople, displayedIndex } = this.state;\n    console.log(displayedIndex, filteredPeople);\n    const displayedItems = filteredPeople.length ? [\n      { text: filteredPeople[displayedIndex].gender, icon: 'üë§'},\n      { text: filteredPeople[displayedIndex].region, icon: 'üåê'},\n      { text: filteredPeople[displayedIndex].phone, icon: 'üìû'},\n      { text: filteredPeople[displayedIndex].birthday.dmy, icon: 'üéÇ'},\n      { text: filteredPeople[displayedIndex].email, icon: '‚úâÔ∏è'},\n      { text: filteredPeople[displayedIndex].password, icon: 'üîë'},\n    ] : [];\n\n    const filterItems = [{icon: '‚ôÇ', type: 'male'}, {icon: '‚ôÄ', type: 'female'}];\n    const person = (\n      filteredPeople.length ?\n        <div>\n          <FilterBar items={filterItems} filter={this.filterPeople} reset={this.resetFilter} />\n          <Image photo={filteredPeople[displayedIndex].photo} name={filteredPeople[displayedIndex].name} />\n          <FullName name={filteredPeople[displayedIndex].name} surname={filteredPeople[displayedIndex].surname} />\n          <List items={displayedItems} />\n        </div>\n        : null\n    )\n\n    return (\n      <div className='info_container'>\n        {person}\n        <button onClick={this.changeIndex}>Click to change</button>\n      </div>\n    );\n  }\n}\nexport default HomeworkWeek3;","import React from 'react';\nimport HomeworkWeek3 from './HomeworkWeek3/HomeworkWeek3';\nimport './App.css';\n\nfunction App() {\n  return <HomeworkWeek3 />;\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}