{"version":3,"sources":["logo.svg","components/people/people.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","People","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","people","_this2","fetch","then","res","json","setState","isLoaded","console","log","react_default","a","createElement","map","person","i","people_HeaderElement","key","content","name","surname","people_ListElement","title","gender","region","Component","HeaderElement","_ref","ListElement","_ref2","App","className","src","logo","alt","people_people","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iQCIlCC,2BACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,OAAQ,IAHER,mFAOM,IAAAS,EAAAN,KAClBO,MAAM,sCACHC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAH,GAAM,OACVC,EAAKK,SACH,CACEC,UAAU,EACVP,UAEF,kBAAMQ,QAAQC,IAAI,mBAAoBT,wCAM5C,OAAKL,KAAKI,MAAMQ,SAIdG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGjB,KAAKI,MAAMC,OAAOa,IAAI,SAACC,EAAQC,GAAT,OACrBL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACI,EAAD,CAAeC,IAAKF,EAAGG,QAASJ,EAAOK,KAAO,IAAML,EAAOM,UAC3DV,EAAAC,EAAAC,cAACS,EAAD,CAAaJ,IAAKF,EAAGO,MAAM,SAASJ,QAASJ,EAAOS,SACpDb,EAAAC,EAAAC,cAACS,EAAD,CAAaJ,IAAKF,EAAGO,MAAM,SAASJ,QAASJ,EAAOU,cATrDd,EAAAC,EAAAC,cAAA,gCAxBQa,cA2CfC,EAAgB,SAAAC,GAAA,IAAGT,EAAHS,EAAGT,QAAH,OAAiBR,EAAAC,EAAAC,cAAA,UAAKM,IAGtCU,EAAc,SAAAC,GAAA,IAAGP,EAAHO,EAAGP,MAAOJ,EAAVW,EAAUX,QAAV,OAClBR,EAAAC,EAAAC,cAAA,UACGU,EADH,KACYJ,IAIC3B,ICrCAuC,mLAZX,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,OACbrB,EAAAC,EAAAC,cAAA,UAAQmB,UAAU,cAChBrB,EAAAC,EAAAC,cAAA,OAAKoB,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCxB,EAAAC,EAAAC,cAAA,MAAImB,UAAU,aAAd,qBAEFrB,EAAAC,EAAAC,cAACuB,EAAD,cARUV,aCOEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.8c40a8f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './people.css';\n\n// Main Component\nclass People extends Component {\n  constructor() {\n    super();\n    this.state = {\n      people: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://uinames.com/api/?amount=10')\n      .then(res => res.json())\n      .then(people =>\n        this.setState(\n          {\n            isLoaded: true,\n            people\n          },\n          () => console.log('People fetched..', people)\n        )\n      );\n  }\n\n  render() {\n    if (!this.state.isLoaded) {\n      return <div>Loading...</div>;\n    }\n    return (\n      <div>\n        <ul>\n          {this.state.people.map((person, i) => (\n            <div>\n              <HeaderElement key={i} content={person.name + ' ' + person.surname} />\n              <ListElement key={i} title=\"Gender\" content={person.gender} />\n              <ListElement key={i} title=\"Region\" content={person.region} />\n            </div>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\n// Header Component\nconst HeaderElement = ({ content }) => <h1>{content}</h1>;\n\n// List Component\nconst ListElement = ({ title, content }) => (\n  <li>\n    {title}: {content}\n  </li>\n);\n\nexport default People;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport People from './components/people/people';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <h1 className=\"App-title\">Shuffle People !</h1>\n        </header>\n        <People />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}